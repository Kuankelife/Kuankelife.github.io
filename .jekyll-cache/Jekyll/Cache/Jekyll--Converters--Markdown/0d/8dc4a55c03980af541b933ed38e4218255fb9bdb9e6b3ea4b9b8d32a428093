I":<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20171004/4406f28d143d47779a40ef53b3ea9171.jpeg" alt="2401" /></p>

<p>到目前为止，其实我们写的python代码都是基于对象的，我们在脚本中传递对象，在表达式中使用对象和调用对象的方法等等，但是要让代码真正称得上是面向对象的（Object-Oriented),那么对象一般需要参与到所谓的继承的层次中。</p>

<p>在python中，面向对象的编程完全可以忽略，是可选的，因为初级阶段不需要使用类，实际上，利用函数的结构几乎可以帮助完成大部分的编程工作。由于妥善使用类需要一些预先的规划，而这种规划可以将代码分解，通过定制和复用使得代码的冗余和开发时间减少，提高了代码的可使用性，所以，类是Python能提供的最有用的工具之一。</p>

<h1 id="类和实例">类和实例</h1>

<p><strong>类:</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>

<p><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p>

<p><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p>

<p><strong>实例变量：</strong> 定义在方法中的变量，只作用于当前实例的类。</p>

<p>对“类”和“对象”的使用：</p>
<ul>
  <li>类就是一个模板，模板里可以包含多个函数，函数里实现一些功能。</li>
  <li>对象则是根据模板创建的实例，通过实例对象可以执行类中的函数。</li>
</ul>

<p>首先认识类的最简单形式</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">#创建类
</span><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1"># 类中的函数
</span>    <span class="k">def</span> <span class="nf">first_function</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1">#功能阐述
</span>        <span class="k">pass</span>

<span class="c1">#根据FirstClass创建对象obj,即实例化
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>注意：创建对象的时候 记得后面加个括号</p>
</blockquote>

<blockquote>
  <p>注意，按照Python通用规则，Class用驼峰式表示(HelloWorld),而其他的obj等等，都用一个下横线隔开(this_is_object),类中的函数第一个参数必须是self，类中定义的函数叫做“方法”。</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">#重写类，增添两个方法
</span><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
     
    <span class="k">def</span> <span class="nf">first_function</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好，python'</span><span class="p">)</span>
 
    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好 %s!'</span> <span class="o">%</span><span class="n">name</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">#创建对象
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="n">obj</span><span class="p">.</span><span class="n">first_function</span><span class="p">()</span>            <span class="c1">#执行First_function方法
</span><span class="n">obj</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'yu'</span><span class="p">)</span> <span class="c1">#执行hello方法　
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>你好，python
你好 yu!
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>注意：self是为了指代它所存在的类Class之中。比如我们如果有好几个不同的obj被创建成同一个类，那么有了self，我们的class FirstClass就能很好的知道哪个指的是自己。</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1"># 这里我们可以创建一个类级别的变量
</span>    <span class="c1"># 它不会随着由此类创建的变量而变化
</span>    <span class="n">name</span> <span class="o">=</span> <span class="s">'中国'</span>
    
    <span class="k">def</span> <span class="nf">first_function</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span>
 
    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好 %s'</span> <span class="o">%</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'%s人'</span> <span class="o">%</span><span class="n">name</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">#创建对象
</span><span class="n">obj1</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="n">obj2</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="n">obj1</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'中国'</span><span class="p">)</span>
<span class="n">obj2</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>你好 中国
中国人
你好 中国
深圳人
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>所以说，这个 self 就是个代指。代指了自己所在的class，类似于英语语法里的反身代词。你可以由 self 点进所指class本身的函数。由此可见，self 本身作为一个代词，并不一定要叫self。你也可以用个其他什么来代替。只不过，必须得是这个类的所有子方法的第一个参数</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1"># 这里我们可以创建一个类级别的变量
</span>    <span class="c1"># 它不会随着由此类创建的变量而变化
</span>    <span class="n">name</span> <span class="o">=</span> <span class="s">'中国'</span>
    
    <span class="k">def</span> <span class="nf">first_function</span><span class="p">(</span><span class="n">other_name</span><span class="p">):</span><span class="c1">#这里把self改成了other_name
</span>        <span class="c1"># 只要它作为第一参数的位置没变，它依旧是类FirstClass的自我指代
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span> 
    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">other_name</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好 %s'</span> <span class="o">%</span><span class="n">other_name</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'%s人'</span> <span class="o">%</span><span class="n">name</span><span class="p">)</span> 

</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>self 本身作为一个代词，并不一定要叫self</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">#创建对象
</span><span class="n">obj1</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="n">obj2</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="n">obj1</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'中国'</span><span class="p">)</span>
<span class="n">obj2</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>你好 中国
中国人
你好 中国
深圳人
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>构造函数：</strong> 构造函数，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值。</p>

<p>跟所有OOP语言一样，python也是有构造函数的，默认为:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="c1">#这就是构造函数，它的职责是在模型创建的初期，就完成定义和赋值等
</span>        <span class="c1">#即自定义的初始化步骤：
</span>        <span class="c1">#同样，它需要self来指代本身这个class
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">'中国'</span>
 
    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好，%s'</span> <span class="o">%</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好，%s'</span> <span class="o">%</span><span class="n">name</span><span class="p">)</span> 
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="c1">#每次创建一个FirstClass类的实例的时候，init会被自动跑一遍：
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">()</span>
<span class="c1"># 默认给self自己的name变量，赋值为'中国'
# 此刻，当我们调用FirstClass的hello()方法时，赋值为'深圳'
</span><span class="n">obj</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>你好，中国
你好，深圳
</pre></td></tr></tbody></table></code></pre></div></div>

<p>init是可以带更多的参数的，用以初始化我们的class本身。</p>

<p>比如说，你要初始化一个类的时候要用到一些外部参数:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1"># 创建类
</span><span class="k">class</span> <span class="nc">FirstClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name2</span><span class="p">):</span><span class="c1"># 你可以在这里附加上一些参数
</span>        <span class="c1"># 这些参数将是创建一个FirstClass类时的必要条件
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name2</span>
 
    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好，%s'</span> <span class="o">%</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'你好，%s'</span> <span class="o">%</span><span class="n">name</span><span class="p">)</span> 
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="c1">#需要填入一个参数：name2
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">FirstClass</span><span class="p">(</span><span class="s">'广东'</span><span class="p">)</span>
<span class="c1">#调用FirstClass的hello()方法时，赋值为'深圳'
</span><span class="n">obj</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">'深圳'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>你好，广东
你好，深圳
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过这些例子，Python的OOP概念大概可以清楚：</p>

<p>Class(类)就是一个把一堆Object(对象)集合起来的地方，在其中有方法和属性</p>

<h1 id="访问限制">访问限制</h1>

<p>在调用obj的时候，可以直接调出name或者使用hello()。那么怎么知道什么时候可以调用他们，什么时候不可以呢？</p>

<p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p>

<p>比如，创建一个类去储存一个人的信息，在外部可以访问到name,其实是可以修改name,这是不安全的。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>  
    
    <span class="k">def</span> <span class="nf">information</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
        
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1"># 输入name,age两个值，创建实例
</span><span class="n">person_1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'小强'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1"># 访问小强的年龄
</span><span class="n">person_1</span><span class="p">.</span><span class="n">age</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这时小强年龄是3岁</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">#修改年龄为10
</span><span class="n">person_1</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">person_1</span><span class="p">.</span><span class="n">age</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>10
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">person_1</span><span class="p">.</span><span class="n">information</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>小强
10
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这是小强年龄是10岁</p>

<p>为了防止这种篡改年龄的操作发生，需要通过设置将一些信息隐藏起来,即在想要隐藏的信息前面加两个下横线</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">__name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">__age</span> <span class="o">=</span> <span class="n">age</span>  
    
    <span class="k">def</span> <span class="nf">information</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">__name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">__age</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">person_1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'小强'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">person_1</span><span class="p">.</span><span class="n">__age</span> <span class="o">=</span> <span class="mi">99</span>
<span class="n">person_1</span><span class="p">.</span><span class="n">information</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>小强
3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>小强年龄并没有被改动</p>

<p>那么如何既保证安全，又能被外部修改呢？应该使用OOP家族传统理念：Getter+Setter</p>

<p>同时，下面应该学会使用Class来定义我们自己的类了</p>

<h1 id="面向对象的特性">面向对象的特性</h1>

<p>面向对象的三大特性是指：封装、继承和多态。</p>

<h2 id="封装">封装</h2>

<p>指的就是把内容封装到某个地方，用于日后调用</p>

<p>它需要：</p>

<ul>
  <li>把内容封装在某处</li>
  <li>从另一处调用被封装的内容</li>
</ul>

<p>通过对象直接调用，我们可以在存完一个内容以后，在类以外的地方，通过这个类的对象，来直接”点“调用</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1"># 初始化Person时，记录下每个人的名字和年龄
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>  
    <span class="c1">#用name和age存下了他们的年龄和名字
</span>    
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">obj1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'张三'</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">obj1</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>    <span class="c1"># 直接调用obj1对象的name属性
</span><span class="k">print</span><span class="p">(</span><span class="n">obj1</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>   <span class="c1"># 直接调用obj1对象的age属性
</span><span class="n">obj2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'李四'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">obj2</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>    <span class="c1"># 直接调用obj2对象的name属性
</span><span class="k">print</span><span class="p">(</span><span class="n">obj2</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>     <span class="c1"># 直接调用obj2对象的age属性
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>张三
15
李四
32
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过self间接调用，执行类中某一个方法时，通过self来调用了类自己的变量</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>  
    
    <span class="k">def</span> <span class="nf">information</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">obj1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'张三'</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">obj1</span><span class="p">.</span><span class="n">information</span><span class="p">()</span> <span class="c1">#Python默认将obj1传给self，所以其实这里做的是obj1.information(obj1)
</span>
<span class="n">obj2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'李四'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">obj2</span><span class="p">.</span><span class="n">information</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>张三
15
李四
32
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>综上所述，对于面向对象的封装来说，其实就是使用构造方法将内容封装到 对象 中，然后通过对象直接或者self间接获取被封装的内容。</p>
</blockquote>

<h2 id="继承">继承</h2>

<p>继承，面向对象中的继承和现实生活中的继承相同，即：子可以继承父的功能和属性。</p>

<p>比如，每个人都有名字和年龄，这个定义的类可以作为父类</p>

<p>但是，每个人都可能有不同的”方法“，即每个人都有不同的特长和职业等等。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="c1"># 我们首先创建一个学生类，这个类是所有学生的爸爸
</span><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>  
    
    <span class="k">def</span> <span class="nf">information</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>

<span class="c1"># 然后，我们创建一个子类，子类，顾名思义，会继承父类Person的方法和属性
</span><span class="k">class</span> <span class="nc">Son</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span><span class="c1">#因为是继承于学生类，所以我们写在括号内
</span>    <span class="c1"># 这里我们可以不写构造函数，于是我们就是直接沿用Person类的构造函数
</span>    <span class="k">def</span> <span class="nf">lol</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 我们有一些新的独有的方法，会被叠加起来
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'不服sala！'</span><span class="p">)</span>
    
<span class="c1"># 接下来，我们创建一个另外一个子类，这个子类有自己新的特点
</span><span class="k">class</span> <span class="nc">Daughter</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span><span class="n">hobby</span><span class="p">):</span> <span class="c1">#这里，我们改写一下构造函数
</span>        <span class="c1"># 于是爸爸的init会被直接overwrite
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">hobby</span> <span class="o">=</span> <span class="n">hobby</span>
    <span class="k">def</span> <span class="nf">more_information</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">hobby</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>注意，子类的定义方式是：class子类名(父类名)，不是class子类名(object)</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">#实例化
</span><span class="n">obj1</span> <span class="o">=</span> <span class="n">Son</span><span class="p">(</span><span class="s">'小东'</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span>
<span class="n">obj1</span><span class="p">.</span><span class="n">lol</span><span class="p">()</span> <span class="c1"># 独有的方法
</span><span class="n">obj1</span><span class="p">.</span><span class="n">information</span><span class="p">()</span><span class="c1">#继承与爸爸的方法
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>不服sala！
小东
18
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">#实例化
</span><span class="n">obj2</span> <span class="o">=</span> <span class="n">Daughter</span><span class="p">(</span><span class="s">'小雨'</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s">'看书'</span><span class="p">)</span>
<span class="n">obj2</span><span class="p">.</span><span class="n">information</span><span class="p">()</span>
<span class="n">obj2</span><span class="p">.</span><span class="n">more_information</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>小雨
20
看书
</pre></td></tr></tbody></table></code></pre></div></div>

<p>所以，对于面向对象的继承来说，其实就是将多个类共有的方法提取到父类中，子类仅需继承父类而不必一一实现每个方法。</p>

<p>这样可以极大的提高效率，减少代码的重复。</p>

<p>问题来了，如果我想多认个干爹呢？
Python和Java/C#的不同就是，Python可以多类继承，也就是，可以认很多干爹</p>

<p>其实这有经典类和新类之分，这是一个历史遗留问题，但python3推荐写法是新类，当本身的类是新式类的时候，就按照广度优先的方式查找 （即，找到一个爸爸，再找下一个爸爸，再找下一个爸爸，平辈之间查找），故这里只讨论新类的写法,在这个文件中，类的写法都是新类的写法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'D.bar'</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">D</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'C.bar'</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">D</span><span class="p">):</span>

    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="c1"># 执行bar方法时
# 首先去A类中查找，如果A类中没有，则继续去B类中找，如果B类中么有，则继续去C类中找，如果C类中么有，则继续去D类中找，如果还是未找到，则报错
# 所以，查找顺序：A --&gt; B --&gt; C --&gt; D
# 在上述查找bar方法的过程中，一旦找到，则寻找过程立即中断，便不会再继续找了
</span><span class="n">a</span><span class="p">.</span><span class="n">bar</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>C.bar
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Python中类的初始化都是__init__(), 所以父类和子类的初始化方式都是__init__(), 但是如果子类初始化时没有这个函数，那么他将直接调用父类的__init__(); 如果子类指定了__init__(), 就会覆盖父类的初始化函数__init__()，如果想在进行子类的初始化的同时也继承父类的__init__(), 就需要在子类中显示地通过super()来调用父类的__init__()函数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Father</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>  <span class="c1"># 定义一个父类
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1"># 父类的初始化
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'大强'</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">role</span> <span class="o">=</span> <span class="s">'parent'</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'I am father'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">son</span><span class="p">(</span><span class="n">Father</span><span class="p">):</span>  <span class="c1"># 定一个继承Father的子类
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1"># 子类的初始化函数，此时会覆盖父类Father类的初始化函数
</span>        <span class="nb">super</span><span class="p">(</span><span class="n">son</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>  <span class="c1"># 在子类进行初始化时，也想继承父类的__init__()就通过super()实现,此时会对self.name= 'animal'
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'I am son'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'小强'</span>  <span class="c1"># 定义子类的name属性,并且会把刚才的self.name= '大强'更新为'小强'
</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">xbai</span> <span class="o">=</span> <span class="n">son</span><span class="p">()</span><span class="c1">#I am father,I am son
</span><span class="k">print</span><span class="p">(</span><span class="n">xbai</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="c1">#'dog'
</span><span class="k">print</span><span class="p">(</span><span class="n">xbai</span><span class="p">.</span><span class="n">role</span><span class="p">)</span><span class="c1">#'parent'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>I am father
I am son
小强
parent
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="多态">多态</h2>

<p>Pyhon不支持多态并且也用不到多态，多态的概念是应用于Java和C#这一类强类型语言中</p>

<p>不同于强类型的语言，一个类型的obj只能一种事儿，</p>

<p>在Python中，只要是能“不报错运行”的类型，都可以放进参数中去</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">F1</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1"># 假设，S1是我们的正统类，它继承于根正苗红的F1，是我们的正统类
</span><span class="k">class</span> <span class="nc">S1</span><span class="p">(</span><span class="n">F1</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'S1.show'</span><span class="p">)</span>

<span class="c1"># S2是路人甲，是个歪瓜裂枣，但是他自己也有一个叫show的方法。
</span><span class="k">class</span> <span class="nc">S2</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'S2.show'</span><span class="p">)</span>
        
        
<span class="c1"># 在Java或C#中定义函数参数时，必须指定参数的类型，也即是说，我们如果用
# Java写下面的Func，需要告知，obj是F1类还是其他什么东西。
# 如果限定了F1，那么S2是不可以被采纳的。
# 然而，在Python中，一切都是Obj，它不care你到底是什么类，直接塞进去就可以
</span>
<span class="k">def</span> <span class="nf">Func</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
    <span class="s">"""Func函数需要接收一个F1类型或者F1子类的类型"""</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="n">s1_obj</span> <span class="o">=</span> <span class="n">S1</span><span class="p">()</span>
<span class="n">Func</span><span class="p">(</span><span class="n">s1_obj</span><span class="p">)</span> <span class="c1"># 在Func函数中传入S1类的对象 s1_obj，执行 S1 的show方法，结果：S1.show
</span>
<span class="n">s2_obj</span> <span class="o">=</span> <span class="n">S2</span><span class="p">()</span>
<span class="n">Func</span><span class="p">(</span><span class="n">s2_obj</span><span class="p">)</span> <span class="c1"># 在Func函数中传入Ss类的对象 ss_obj，执行 Ss 的show方法，结果：S2.show
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>S1.show
S2.show
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="获取对象信息">获取对象信息</h2>
<p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p>

<p><strong>type()</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>int
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="s">'str'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>str
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>NoneType
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="nb">abs</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>builtin_function_or_method
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">a</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span> 

<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>type
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如何用语句判断是不是一种type呢？</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span><span class="o">==</span><span class="nb">type</span><span class="p">(</span><span class="mi">456</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="s">'abc'</span><span class="p">)</span><span class="o">==</span><span class="nb">type</span><span class="p">(</span><span class="s">'123'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="s">'abc'</span><span class="p">)</span><span class="o">==</span><span class="nb">type</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>False
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">(</span><span class="s">'abc'</span><span class="p">)</span><span class="o">==</span><span class="nb">str</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">type</span><span class="p">([])</span><span class="o">==</span><span class="nb">list</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>isinstance()</strong></p>

<p>isinstance()可以告诉我们，一个对象是否是某种类型（包括继承关系）。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
    <span class="k">pass</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">k</span><span class="o">=</span><span class="n">A</span><span class="p">()</span>
<span class="n">g</span><span class="o">=</span><span class="n">B</span><span class="p">()</span>
<span class="n">y</span><span class="o">=</span><span class="n">C</span><span class="p">()</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">isinstance</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">isinstance</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<p>同理，isinstance()也可以当type()用</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">isinstance</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>dir()</strong></p>

<p>如果要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">dir</span><span class="p">(</span><span class="s">'ABC'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="rouge-code"><pre>['__add__',
 '__class__',
 '__contains__',
 '__delattr__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__getnewargs__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__mod__',
 '__mul__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__rmod__',
 '__rmul__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'capitalize',
 'casefold',
 'center',
 'count',
 'encode',
 'endswith',
 'expandtabs',
 'find',
 'format',
 'format_map',
 'index',
 'isalnum',
 'isalpha',
 'isdecimal',
 'isdigit',
 'isidentifier',
 'islower',
 'isnumeric',
 'isprintable',
 'isspace',
 'istitle',
 'isupper',
 'join',
 'ljust',
 'lower',
 'lstrip',
 'maketrans',
 'partition',
 'replace',
 'rfind',
 'rindex',
 'rjust',
 'rpartition',
 'rsplit',
 'rstrip',
 'split',
 'splitlines',
 'startswith',
 'strip',
 'swapcase',
 'title',
 'translate',
 'upper',
 'zfill']
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>类似__xxx__的属性和方法在Python中都是有特殊用途的，比如__len__方法返回长度。在Python中，如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的__len__()方法，所以，下面的代码是等价的.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="s">'ABC'</span><span class="p">.</span><span class="n">__len__</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们自己写的类，如果也想用len(myObj)的话，就自己写一个__len__()方法：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">100</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
<span class="nb">len</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>100
</pre></td></tr></tbody></table></code></pre></div></div>

<p>仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">9</span>
    <span class="k">def</span> <span class="nf">power</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>可以测试该对象的属性</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'x'</span><span class="p">)</span> <span class="c1">#有木有属性'x'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">obj</span><span class="p">.</span><span class="n">x</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>9
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)</span> <span class="c1"># 有属性'y'吗？
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>False
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">setattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'y'</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span> <span class="c1"># 设置一个属性'y'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)</span> <span class="c1"># 有属性'y'吗？
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)</span> <span class="c1"># 获取属性'y'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>19
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">obj</span><span class="p">.</span><span class="n">y</span> <span class="c1"># 获取属性'y'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>19
</pre></td></tr></tbody></table></code></pre></div></div>

<p>可以传入一个default参数，如果属性不存在，就返回默认值：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'z'</span><span class="p">,</span> <span class="mi">404</span><span class="p">)</span> <span class="c1"># 获取属性'z'，如果不存在，返回默认值404
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>404
</pre></td></tr></tbody></table></code></pre></div></div>

<p>也可以获得对象的方法：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'power'</span><span class="p">)</span> <span class="c1"># 有属性'power'吗？
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>True
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'power'</span><span class="p">)</span> <span class="c1"># 获取属性'power'
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&lt;bound method MyClass.power of &lt;__main__.MyClass object at 0x7f36963f1898&gt;&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">fn</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'power'</span><span class="p">)</span> <span class="c1"># 获取属性'power'并赋值到变量fn
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">fn</span> <span class="c1"># fn指向obj.power
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&lt;bound method MyClass.power of &lt;__main__.MyClass object at 0x7f36963f1898&gt;&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">fn</span><span class="p">()</span> <span class="c1"># 调用fn()与调用obj.power()是一样的
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>81
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="实例属性和类属性">实例属性和类属性</h2>

<p>由于Python是动态语言，根据类创建的实例可以任意绑定属性。</p>

<p>给实例绑定属性的方法是通过实例变量，或者通过self变量：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Student</span><span class="p">(</span><span class="s">'小明'</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">90</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>但是，如果Student类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归Student类所有。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">'Student'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>实例与类的属性差异</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">'无名'</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span> <span class="c1"># 创建实例s
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>无名
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">print</span><span class="p">(</span><span class="n">Person</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># 打印类的name属性
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>无名
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">s</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'小李'</span> <span class="c1"># 给实例绑定name属性
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>小李
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">print</span><span class="p">(</span><span class="n">Person</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># 但是类属性并未消失，用Student.name仍然可以访问
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>无名
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">del</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span> <span class="c1"># 如果删除实例的name属性
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>无名
</pre></td></tr></tbody></table></code></pre></div></div>

<p>注意：从上面的例子可以看出，在编程的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>

<h3 id="模块和包">模块和包</h3>

<p>如果上面的内容理解了，那么就可以开始编写自己的模块和包了。</p>

<p>Python的程序由包（package）、模块（module）和函数组成。包是由一系列模块组成的集合。模块是处理某一类问题的函数和类的集合。</p>

<p>包就是一个完成特定任务的工具箱，Python提供了许多有用的工具包，如字符串处理、图形用户接口、Web应用、图形图像处理等。这些自带的工具包和模块安装在Python的安装目录下的Lib子目录中。</p>

<blockquote>
  <p>注意：
包必须至少含有一个__init__.py文件按，该文件的内容可以为空。<strong>init</strong>.py用于标识当前文件夹是一个包。</p>
</blockquote>

<h3 id="模块">模块</h3>

<p>在python中一个文件可以被看成一个独立模块，而包对应着文件夹，模块把python代码分成一些有组织的代码段，通过导入的方式实现代码重用。</p>

<p>导入模块时，是按照sys.path变量的值搜索模块，sys.path的值是包含每一个独立路径的列表，包含当前目录、python安装目录、PYTHONPATH环境变量，搜索顺序按照路径在列表中的顺序（一般当前目录优先级最高）。</p>

<p>想看自己的Python路径，大家可以</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>import sys

print(sys.path)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如果你发现你在某个地方写的文件（包）import错误，你就可以看看这个sys.path是否囊括了你那批文件的根目录。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">sys</span>
<span class="k">print</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>['/opt/conda/lib/python3.6/jqcommon', '/opt/conda/lib/python36.zip', '/opt/conda/lib/python3.6', '/opt/conda/lib/python3.6/lib-dynload', '', '/home/jquser/.local/lib/python3.6/site-packages', '/opt/conda/lib/python3.6/site-packages', '/opt/conda/lib/python3.6/site-packages/IPython/extensions', '/home/jquser/.ipython']
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="导入模块">导入模块</h3>

<p>使用import语句（不管是你自己写的，还是你下载的别人的）</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>import module1

import module2

import module3

import module1,module2,module3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这两种方式的效果是一样的，但是第一种可读性比第二种好，推荐按照下面的顺序导入模块，并且一般在文件首部导入所有的模块</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>python标准库

第三方模块

自定义模块
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="使用from-import语句导入模块的属性">使用from-import语句导入模块的属性</h3>

<p>单行导入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>from module import name1,name2,name3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>多行导入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>from module import name1,name2,name3 导入全部属性（由于容易覆盖当前名称空间中现有的名字，所以一般不推荐使用，适合模块中变量名很长并且变量很多的情况）

from module import *
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="自定义导入模块名称">自定义导入模块名称</h3>

<p>就是为了用的时候方便好记。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>import mymodule as m
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="包">包</h3>

<p>包将有联系的模块组织在一起，有效避免模块名称冲突问题，让应用组织结构更加清晰。 一个普通的python应用程序目录结构：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>app/
__init__.py
a/
__init__.py
a.py
b/
__init__.py
b.py app是最顶层的包，a和b是它的子包，可以这样导入：

from app.a import a
from app.b.b import test

a.test()
test() 上面代码表示：
</pre></td></tr></tbody></table></code></pre></div></div>

<p>导入app包的子包a和子包b的属性test，然后分别调用test方法。
每个目录下都有__init__.py文件，这个是初始化模块，from-import语句导入子包时需要它，可以在里面做一些初始化工作，也可以是空文件。ps：<strong>init</strong>.py定义的属性直接使用 顶层包.子包 的方式导入，如在目录a的__init__.py文件中定义init_db()方法，调用如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>from app import a

a.init_db()
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="自定义的类模块包">自定义的类、模块、包</h1>

<p>现在已经完全掌握了使用包的方法，自己定义类，并生成一个可运行的程序</p>

<h2 id="例子1">例子1</h2>
<p>编写一个自动获取数据，并且按一定比例把数据集划分为训练集和测试集的类。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="c1">#导入需要用到的库
</span><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span><span class="p">,</span> <span class="n">datasets</span>

<span class="c1">#编写一个自动获取数据，并且按一定比例把数据集划分为训练集和测试集的类。
</span><span class="k">class</span> <span class="nc">DataSpilt</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1"># 我们创造一个dataset的类，这个类会帮我们下载相关的数据集，
</span>    <span class="c1"># 并给我们分类好x,y
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="c1"># 告诉类，我们需要哪一个数据集
</span>        <span class="c1"># 我们有两个选择，一个是'iris'一个是'digits'
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        
    <span class="k">def</span> <span class="nf">download_data</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 从sklearn的自带集中下载我们指定的数据集
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'iris'</span><span class="p">:</span>
            <span class="c1"># 这里是sklearn自带的数据集下载方法，更多信息可以参照官网
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">downloaded_data</span> <span class="o">=</span> <span class="n">datasets</span><span class="p">.</span><span class="n">load_iris</span><span class="p">()</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'digits'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">downloaded_data</span> <span class="o">=</span> <span class="n">datasets</span><span class="p">.</span><span class="n">load_digits</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 如果不是我们预想的两种数据集，则报错
</span>            <span class="k">print</span><span class="p">(</span><span class="s">'Dataset Error: No named datasets'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">generate_xy</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 通过这个过程来把我们的数据集分为原始数据以及他们的label
</span>        <span class="c1"># 我们先把数据下载下来
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">download_data</span><span class="p">()</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">downloaded_data</span><span class="p">.</span><span class="n">data</span>
        <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">downloaded_data</span><span class="p">.</span><span class="n">target</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Original data looks like this: </span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Labels looks like this: </span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span>
    
    <span class="k">def</span> <span class="nf">get_train_test_set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ratio</span><span class="p">):</span>
        <span class="c1"># 这里，我们把所有的数据分成训练集和测试集
</span>        <span class="c1"># 一个参数要求我们告知，我们以多少的比例来分割训练和测试集
</span>        <span class="c1"># 首先，我们把XY给generate出来：
</span>        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">generate_xy</span><span class="p">()</span>
        
        <span class="c1"># 有个比例，我们首先得知道 一共有多少的数据
</span>        <span class="n">n_samples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># 于是我们知道，有多少应该是训练集，多少应该是测试集
</span>        <span class="n">n_train</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n_samples</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">)</span>
        <span class="c1"># 好了，接下来我们分割数据
</span>        <span class="n">X_train</span> <span class="o">=</span> <span class="n">x</span><span class="p">[:</span><span class="n">n_train</span><span class="p">]</span>
        <span class="n">y_train</span> <span class="o">=</span> <span class="n">y</span><span class="p">[:</span><span class="n">n_train</span><span class="p">]</span>
        <span class="n">X_test</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">n_train</span><span class="p">:]</span>
        <span class="n">y_test</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">n_train</span><span class="p">:]</span>
        <span class="c1"># 好，我们得到了所有想要的玩意儿
</span>        <span class="k">return</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用我们自己写的类</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1"># 比如，我们使用digits数据集
</span><span class="n">data</span> <span class="o">=</span> <span class="n">DataSpilt</span><span class="p">(</span><span class="s">'digits'</span><span class="p">)</span>
<span class="c1"># 接着，我们可以用0.7的分割率把x和y给分割出来
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">get_train_test_set</span><span class="p">(</span><span class="mf">0.7</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>Original data looks like this: 
 [[0.0 0.0 5.0 ... 0.0 0.0 0.0]
 [0.0 0.0 0.0 ... 10.0 0.0 0.0]
 [0.0 0.0 0.0 ... 16.0 9.0 0.0]
 ...
 [0.0 0.0 1.0 ... 6.0 0.0 0.0]
 [0.0 0.0 2.0 ... 12.0 0.0 0.0]
 [0.0 0.0 10.0 ... 12.0 1.0 0.0]]

Labels looks like this: 
 [0 1 2 ... 8 9 8]
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">X_train</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>array([[0.0, 0.0, 5.0, ..., 0.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, ..., 10.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, ..., 16.0, 9.0, 0.0],
       ...,
       [0.0, 0.0, 0.0, ..., 3.0, 0.0, 0.0],
       [0.0, 0.0, 5.0, ..., 11.0, 3.0, 0.0],
       [0.0, 0.0, 3.0, ..., 0.0, 0.0, 0.0]])
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">y_train</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>array([0, 1, 2, ..., 4, 3, 1])
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="例子2">例子2</h2>

<p>示范了累计收益图，月度收益热力图，回撤图的写法，并且对参数和格式做出了规范的解释说明</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">#导入需要用到的库
</span><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">from</span> <span class="nn">matplotlib.backends.backend_agg</span> <span class="kn">import</span> <span class="n">FigureCanvasAgg</span>
<span class="kn">from</span> <span class="nn">matplotlib.ticker</span> <span class="kn">import</span> <span class="n">FuncFormatter</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">'font.sans-serif'</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="s">'SimHei'</span><span class="p">]</span> <span class="c1">#用来正常显示中文标签
</span><span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">'axes.unicode_minus'</span><span class="p">]</span><span class="o">=</span><span class="bp">False</span> <span class="c1">#用来正常显示负号
</span><span class="kn">import</span> <span class="nn">empyrical</span> <span class="k">as</span> <span class="n">ep</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="编写时间序列分析的模块"><strong>编写时间序列分析的模块</strong></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
</pre></td><td class="rouge-code"><pre><span class="c1">#时间序列分析的模块
</span><span class="k">class</span> <span class="nc">TsAnalyze</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="c1">#初始化
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>
    
    
    <span class="k">def</span> <span class="nf">percentage</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">x</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
        <span class="s">"""
        将百分比符号添加到坐标轴刻度，画图用到
        """</span>
        <span class="k">return</span> <span class="s">'%.0f%%'</span> <span class="o">%</span> <span class="n">x</span>
    
    
    <span class="k">def</span> <span class="nf">plot_accumulated_returns</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">returns</span><span class="p">,</span>
                             <span class="n">benchmark_returns</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                             <span class="n">logy</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                             <span class="n">legend_loc</span><span class="o">=</span><span class="s">'best'</span><span class="p">,</span>
                             <span class="n">ax</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s">"""
        画出累计收益的曲线图。

        参数
        ----------
        returns : pandas里面的序列格式
            每日收益，记住不是累计收益。
        benchmark_returns : pandas里面的序列格式, 可选。
        logy : 布尔值，可选
            是否对y轴进行对数缩放。
        legend_loc : matplotlib图例的位置格式，可选
            matplotlib图例的位置.

        ax : matplotlib的轴,可选
            用来绘图的轴。
        **kwargs,可选
            传输到绘图函数的其他参数。

        返回
        -------
        ax : ax的对象
        """</span>

        <span class="k">if</span> <span class="n">ax</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">"ggplot"</span><span class="p">)</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

        <span class="n">cum_rets</span> <span class="o">=</span> <span class="n">ep</span><span class="p">.</span><span class="n">cum_returns</span><span class="p">(</span><span class="n">returns</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
        <span class="n">y_axis_formatter</span> <span class="o">=</span> <span class="n">FuncFormatter</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">percentage</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">set_major_formatter</span><span class="p">(</span><span class="n">FuncFormatter</span><span class="p">(</span><span class="n">y_axis_formatter</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">benchmark_returns</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">cum_benchmark_returns</span> <span class="o">=</span> <span class="n">ep</span><span class="p">.</span><span class="n">cum_returns</span><span class="p">(</span>
                <span class="n">benchmark_returns</span><span class="p">[</span><span class="n">cum_rets</span><span class="p">.</span><span class="n">index</span><span class="p">],</span> <span class="mf">1.0</span><span class="p">)</span>
            <span class="n">cum_benchmark_returns</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lw</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span>
                                    <span class="n">label</span><span class="o">=</span><span class="s">'基准收益'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
                                    <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="n">cum_rets</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lw</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
                            <span class="n">label</span><span class="o">=</span><span class="s">'策略收益'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">legend_loc</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">legend_loc</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">framealpha</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">axhline</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'--'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'black'</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'时间'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'累计收益'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_yscale</span><span class="p">(</span><span class="s">'log'</span> <span class="k">if</span> <span class="n">logy</span> <span class="k">else</span> <span class="s">'linear'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'收益图'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ax</span>
    
    <span class="k">def</span> <span class="nf">plot_monthly_returns_heatmap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">returns</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s">"""
        画出月度收益热力图

        参数
        ----------
        returns : pandas里面的序列格式
            returns : pandas里面的序列格式
                每日收益，记住不是累计收益。
        ax : matplotlib的轴,可选
                用来绘图的轴。
            **kwargs,可选
                传输到绘图函数的其他参数。
        返回
        ----------
            ax : ax的对象
        """</span>

        <span class="k">if</span> <span class="n">ax</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

        <span class="n">monthly_ret_table</span> <span class="o">=</span> <span class="n">ep</span><span class="p">.</span><span class="n">aggregate_returns</span><span class="p">(</span><span class="n">returns</span><span class="p">,</span> <span class="s">'monthly'</span><span class="p">)</span>
        <span class="n">monthly_ret_table</span> <span class="o">=</span> <span class="n">monthly_ret_table</span><span class="p">.</span><span class="n">unstack</span><span class="p">().</span><span class="nb">round</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

        <span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span>
            <span class="n">monthly_ret_table</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span>
            <span class="mf">100.0</span><span class="p">,</span>
            <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="s">"size"</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span>
            <span class="n">alpha</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
            <span class="n">center</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
            <span class="n">cbar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">cmap</span><span class="o">=</span><span class="n">matplotlib</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">RdYlGn</span><span class="p">,</span>
            <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'年'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'月'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'月度收益热力图'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ax</span>


    <span class="k">def</span> <span class="nf">plot_drawdown_underwater</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">returns</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s">"""
        画出回撤图

        参数
        ----------
        returns : pandas里面的序列格式
            returns : pandas里面的序列格式
                每日收益，记住不是累计收益。
        ax : matplotlib的轴,可选
                用来绘图的轴。
            **kwargs,可选
                传输到绘图函数的其他参数。

        返回
        ----------
            ax : ax的对象
        """</span>

        <span class="k">if</span> <span class="n">ax</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">"ggplot"</span><span class="p">)</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

        <span class="n">y_axis_formatter</span> <span class="o">=</span> <span class="n">FuncFormatter</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">percentage</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">set_major_formatter</span><span class="p">(</span><span class="n">FuncFormatter</span><span class="p">(</span><span class="n">y_axis_formatter</span><span class="p">))</span>

        <span class="n">df_cum_rets</span> <span class="o">=</span> <span class="n">ep</span><span class="p">.</span><span class="n">cum_returns</span><span class="p">(</span><span class="n">returns</span><span class="p">,</span> <span class="n">starting_value</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
        <span class="n">running_max</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">maximum</span><span class="p">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">df_cum_rets</span><span class="p">)</span>
        <span class="n">underwater</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span> <span class="o">*</span> <span class="p">((</span><span class="n">running_max</span> <span class="o">-</span> <span class="n">df_cum_rets</span><span class="p">)</span> <span class="o">/</span> <span class="n">running_max</span><span class="p">)</span>
        <span class="p">(</span><span class="n">underwater</span><span class="p">).</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span><span class="n">linewidth</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="s">'area'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'回撤率'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'回撤图'</span><span class="p">)</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'时间'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ax</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#实例化
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">TsAnalyze</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>获取收益率数据</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">#平安银行收益
</span><span class="n">df_returns</span> <span class="o">=</span> <span class="n">get_price</span><span class="p">(</span><span class="s">'000001.XSHE'</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="s">'2018-01-01'</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="s">'2020-10-30'</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s">'daily'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'close'</span><span class="p">).</span><span class="n">pct_change</span><span class="p">().</span><span class="n">close</span>
<span class="c1">#沪深300指数收益
</span><span class="n">benchmark_returns</span> <span class="o">=</span> <span class="n">get_price</span><span class="p">(</span><span class="s">'000300.XSHG'</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="s">'2018-01-01'</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="s">'2020-10-30'</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s">'daily'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'close'</span><span class="p">).</span><span class="n">close</span><span class="p">.</span><span class="n">pct_change</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>series格式长这个样子</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">df_returns</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>2018-01-02         NaN
2018-01-03   -0.027418
2018-01-04   -0.005482
2018-01-05    0.003150
2018-01-08   -0.025118
Name: close, dtype: float64
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="累计收益图">累计收益图</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益和基准收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_accumulated_returns</span><span class="p">(</span><span class="n">df_returns</span><span class="p">,</span><span class="n">benchmark_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="http://mk.027cgb.cn/627139/bgpc/20201114/output_146_1.png" /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_monthly_returns_heatmap</span><span class="p">(</span><span class="n">df_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="http://mk.027cgb.cn/627139/bgpc/20201114/output_147_1.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_drawdown_underwater</span><span class="p">(</span><span class="n">df_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="http://mk.027cgb.cn/627139/bgpc/20201114/output_148_1.png" /></p>
<h3 id="模块化">模块化</h3>

<p>随着我们代码越写越多，文件中代码越来越长，最终导致越来越难以维护。为了编写可维护代码，我们可以把很多函数分组，分别放到不同文件里。在Python中，一个 .py 文件就称为一个模块（module）。为避免模块名冲突，Python引入了按目录来组织模块的方法，称为包（package）。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>   使用模块优点：
   
   提高代码可维护性
   
   编写代码不必从零开始，当一个模块编写完毕，就可以被其他地方引用。
   
   避免函数名和变量名冲突，相同名字的函数和变量完全可以分别存在不同的模块中。
</pre></td></tr></tbody></table></code></pre></div></div>

<p>把写好的代码放在其他地方，调用，真正起到代码复用的的效果</p>

<p>在同一文件夹timeseries_analyze_package下，放置timeseries_analyze.py和__init__.py文件即可,如果要新填类或者函数，可以在timeseries_analyze.py填写代码，运用上面讲到的类的封装，继承，多态等性质。</p>

<p>导入自己的模块timeseries_analyze</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">timeseries_analyze</span> <span class="k">as</span> <span class="n">tsa</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#创建实例
</span><span class="n">obj</span> <span class="o">=</span> <span class="n">tsa</span><span class="p">.</span><span class="n">TsAnalyze</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益和基准收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_accumulated_returns</span><span class="p">(</span><span class="n">df_returns</span><span class="p">,</span><span class="n">benchmark_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_monthly_returns_heatmap</span><span class="p">(</span><span class="n">df_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="http://mk.027cgb.cn/627139/bgpc/20201114/output_155_1.png" /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">#输入:策略收益，series格式
</span><span class="n">obj</span><span class="p">.</span><span class="n">plot_drawdown_underwater</span><span class="p">(</span><span class="n">df_returns</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="http://mk.027cgb.cn/627139/bgpc/20201114/output_157_1.png" /></p>

<h2 id="next">Next</h2>

<p>现在自己动手在这个模块修复bug,或者添加有意思的功能吧</p>

<blockquote>
  <p>如果在这部分学习上遇到疑惑的话，可以通过<strong>1115223619@qq.com</strong>或者<a href="https://ownyulife.top/contact/">这里</a>咨询助教。</p>
</blockquote>
:ET